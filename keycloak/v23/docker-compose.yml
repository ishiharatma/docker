# docker-compose -f docker-compose.yml up
# docker-compose -f docker-compose.yml build
# pgAdmin: http://localhost:8000/
# keycloak: http://localhost:8080/auth/
#
version: '3.7'

volumes:
  postgres_data:
      driver: local

services:
  postgres:
    image: postgres:16.2
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    #restart: always
    networks:
      - keycloak_network
  pgadmin4:
# https://hub.docker.com/r/dpage/pgadmin4/tags
    image: dpage/pgadmin4:latest
    #container_name: pgadmin4
    ports:
      - 8000:80
    volumes:
      - ./docker/pgadmin4:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    hostname: pgadmin4
    links:
      - postgres
    depends_on:
      - postgres
    #restart: always
    networks:
      - keycloak_network
  keycloak:
# https://quay.io/repository/keycloak/keycloak?tab=tags&tag=
#    image: quay.io/keycloak/keycloak:18.0.2
    #container_name: keycloak
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # Keycloak 管理コンソール
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      # データベース
      KC_DB: postgres
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_URL_PORT: 5432
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: ${POSTGRES_DB}
      #KC_DB_URL: 'jdbc:postgresql://postgres:5432/${POSTGRES_DB}'
      KC_LOG_LEVEL: ERROR,org.infinispan:DEBUG,org.jgroups:DEBUG
      # JAVA_OPTS_APPEND: ''
      # JDBC_PARAMS: 'useSSL=false'
      TZ: 'Asia/Tokyo' # タイムゾーン
      KC_HTTP_RELATIVE_PATH: '/auth' # 管理コンソールのパス。デフォルトでは「/」のため、v16 利用時と合わせるために指定する
      KC_HEALTH_ENABLED: 'true' # ヘルスチェック URL の有効化
      KC_HTTP_ENABLED: 'true' # HTTP の待ち受け
      KC_HOSTNAME_STRICT: 'false'
      # see https://www.keycloak.org/server/hostname#_accessing_keycloak_in_production_mode_using_http
      KC_HOSTNAME_STRICT_HTTPS: 'false'
      # see https://www.keycloak.org/server/hostname#_backend_endpoints
      KC_HOSTNAME_STRICT_BACKCHANNEL: 'true'
      # see https://www.keycloak.org/server/reverseproxy
      KC_PROXY: 'edge'
      # see https://www.keycloak.org/server/features#_supported_features
      KC_FEATURES: 'token-exchange'
      KC_CACHE: 'ispn'
      KC_CACHE_STACK: 'tcp'
      KC_CACHE_CONFIG_FILE : 'cache-ispn-jdbc-ping.xml'
      JGROUPS_DISCOVERY_PROTOCOL: 'JDBC_PING'
      # see https://github.com/keycloak/keycloak-containers/blob/d4ce446dde3026f89f66fa86b58c2d0d6132ce4d/docker-compose-examples/keycloak-postgres-jdbc-ping.yml#L49
      #JGROUPS_DISCOVERY_PROPERTIES: 'datasource_jndi_name=java:jboss/datasources/KeycloakDS,remove_all_data_on_view_change=true,info_writer_sleep_time=500,initialize_sql="CREATE TABLE IF NOT EXISTS JGROUPSPING ( own_addr varchar(200) NOT NULL, cluster_name varchar(200) NOT NULL, created timestamp default current_timestamp, ping_data BYTEA, constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))"'
# https://github.com/andissanayake/ForgeContainer/blob/example/keycloak-docker-compose/docker-compose.yml
# https://github.com/p2-inc/keycloak-theme-template/blob/master/docker-compose.yml
#    volumes: 
#      - ./src/main/resources/theme/:/opt/keycloak/themes/
#    entrypoint: /opt/keycloak/bin/kc.sh --verbose start-dev --spi-theme-static-max-age=-1 --spi-theme-cache-themes=false --spi-theme-cache-templates=false
    command:
      - "start"
      - "--auto-build"
    ports:
      - 8080:8080
    #restart: always
    links:
      - postgres
    depends_on:
      - postgres
    networks:
      - keycloak_network
networks:
  keycloak_network:
    driver: bridge